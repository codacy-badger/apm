-include libs.make

# This variable defined in the program.
VERSION = @VERSION@
CXX = g++

# -lstdc++fs — include filesystem library.
override DEFAULT_FLAGS += -std=c++17 -lstdc++fs
# Flags for release build (this variable will overwrite on debug build).
# -DNDEBUG — disable the assert() macros.
# -s — strip debug symbols.
# -O3 — enable max number of optimizations for min execution time (slow compilation).
FLAGS = $(DEFAULT_FLAGS) -DNDEBUG -s -O3
# -O0 — turn off any optimizations (fast compilation time).
# -ggdb — compile with debugging symbols for GDB.
DEBUG_FLAGS = $(DEFAULT_FLAGS) -O0 -ggdb

override DEFINES += -DVERSION=\"$(VERSION)\"
# Enable all warnings from the compiler.
override WARNS += -Wall -Wextra -fexceptions

# Relative directories of the project.
LIB = lib
BUILD = build
OBJ = $(BUILD)/obj
SRC = src
TEST = test

# This variable use while building libraries.
# Set threads number equals to number of processor cores, plus 1.
THREADS = $(shell $(UNIX_PREFIX)echo $$(($$(nproc) + 1)))

# Get all source files, including subdirectories.
SOURCES = $(shell $(UNIX_PREFIX)find '$(SRC)' -type f -name '*.cpp')
TEST_SOURCES = $(shell $(UNIX_PREFIX)find '$(TEST)' -type f -name '*.cpp')

# Change destination directory and files extension.
OBJECTS = $(SOURCES:$(SRC)/%.cpp=$(OBJ)/%.o)
# Exclude the main() function of the program, as it interfere
# with the main() function of tests while linking.
TEST_OBJECTS = $(filter-out $(OBJ)/main.o,$(OBJECTS)) \
	$(TEST_SOURCES:$(TEST)/%.cpp=$(OBJ)/%.test.o)



.DEFAULT_GOAL = $(BUILD)/apm
$(BUILD)/apm: $(OBJECTS)
	@$(UNIX_PREFIX)echo '  $(CXX)    $@'
	@$(CXX) $(WARNS) $^ -o $@ $(LDFLAGS) $(LDLIBS) $(FLAGS)

$(OBJ)/%.o: $(SRC)/%.cpp
ifeq ($(wildcard $(LIB)/*),)
# If dependencies didn't fetch.
	$(info Fetching header-only libraries...)
	@$(MAKE) libs
endif
# Create target directory for object.
	@$(UNIX_PREFIX)mkdir -p $(@D)
	@$(UNIX_PREFIX)echo '  $(CXX)    $@'
	@$(CXX) $(WARNS) $(DEFINES) -c $< -o $@ $(CXXFLAGS) $(FLAGS)

.PHONY: debug
debug: .debug-init $(BUILD)/apm
.debug-init:
	$(info Debug build)
	$(eval FLAGS = $(DEBUG_FLAGS))


.PHONY: test
test: .test-init $(BUILD)/test
.test-init:
	$(info Building tests...)

$(BUILD)/test: $(TEST_OBJECTS)
	@$(UNIX_PREFIX)echo '  $(CXX)    $@'
	@$(CXX) $(WARNS) $^ -o $@ $(LDFLAGS) $(LDLIBS) $(DEBUG_FLAGS)

$(OBJ)/%.test.o: $(TEST)/%.cpp
# Create target directory for test object.
	@$(UNIX_PREFIX)mkdir -p $(@D)
	@$(UNIX_PREFIX)echo '  $(CXX)    $@'
	@$(CXX) $(WARNS) $(DEFINES) -c $< -o $@ $(CXXFLAGS) $(DEBUG_FLAGS)


# Before build the package recommended compile
# the project in release mode (if this isn't done).
.PHONY: @DEB@
@DEB@: $(BUILD)/apm
# Script accepts a root directory of the package.
	@scripts/make-deb.sh deb

.PHONY: clean
clean:
	@$(UNIX_PREFIX)rm -rf autom4te.cache/ $(BUILD) config.log config.status

# This rule also remove downloaded libraries, Vim session file and
# auto-generated files by "autoreconf" and "./configure".
.PHONY: full-clean
full-clean: clean
	@$(UNIX_PREFIX)rm -rf $(LIB) scripts/make-deb.sh aclocal.m4 configure Makefile .session.vim
